CREATE TABLE "users" (
    "id" SERIAL PRIMARY KEY,
    "first_name" varchar(50) NOT NULL,
    "last_name" varchar(50) NOT NULL,
    "nickname" varchar(50) NOT NULL,
    "email" varchar(100) UNIQUE NOT NULL,
    "phone_number" varchar(15) UNIQUE NOT NULL,
    "role" varchar(50) NOT NULL CHECK (role IN ('Admin', 'Manager', 'Seller', 'Client')),
    "profile_picture" varchar(500),
    "location" varchar(500),
    "password" varchar(128) NOT NULL,
    "created_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE FUNCTION update_changed() RETURNS TRIGGER AS $$
BEGIN
     NEW.updated_at = NOW();
     RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_user_modtime
BEFORE UPDATE ON "users"
FOR EACH ROW EXECUTE PROCEDURE update_changed();









CREATE TABLE "products" (
    "id" SERIAL PRIMARY KEY,
    "product_name" varchar(50) NOT NULL,
    "price" decimal(8,2) NOT NULL,
    "description" text,
    "ingredients" text,
    "image" varchar(255) DEFAULT NULL,
    "created_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE FUNCTION update_changed() RETURNS TRIGGER AS $$
BEGIN
     NEW.updated_at = NOW();
     RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_product_modtime
BEFORE UPDATE ON "products"
FOR EACH ROW EXECUTE PROCEDURE update_changed();








CREATE TABLE "orders" (
    "id" SERIAL PRIMARY KEY,
    "client_id" int REFERENCES "users"("id"),
    "seller_id" int REFERENCES "users"("id"),
    "total_price" decimal(8,2) NOT NULL DEFAULT 0.00,
    "created_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE FUNCTION update_changed() RETURNS TRIGGER AS $$
BEGIN
     NEW.updated_at = NOW();
     RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_order_modtime
BEFORE UPDATE ON "orders"
FOR EACH ROW EXECUTE PROCEDURE update_changed();







CREATE TABLE "order_items" (
    "id" SERIAL PRIMARY KEY,
    "order_id" int REFERENCES "orders"("id"),
    "product_id" int REFERENCES "products"("id"),
    "quantity" int NOT NULL,
    "order_item_total_price" decimal(8,2) NOT NULL DEFAULT 0.00,
    "created_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updated_at" timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE OR REPLACE FUNCTION update_changed() RETURNS TRIGGER AS $$
BEGIN
     NEW.updated_at = NOW();
     RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_order_item_modtime
BEFORE UPDATE ON "order_items"
FOR EACH ROW EXECUTE PROCEDURE update_changed();